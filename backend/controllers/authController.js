const User = require('../models/User');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');

const generateToken = (userId) => {
  return jwt.sign({ userId }, process.env.JWT_SECRET || 'fallback-secret', { expiresIn: '7d' });
};

exports.register = async (req, res) => {
  try {
    console.log('üì• Dados recebidos no register:', req.body);

    // ‚úÖ APENAS CAMPOS QUE EXISTEM NA TABELA
    const { nome, email, senha, tipo, telefone, endereco, cep } = req.body;

    // Valida√ß√µes b√°sicas
    if (!nome || !email || !senha || !tipo) {
      return res.status(400).json({ error: 'Todos os campos obrigat√≥rios devem ser preenchidos' });
    }

    console.log('üîç Verificando se usu√°rio j√° existe...');

    // Verificar se o usu√°rio j√° existe
    const existingUser = await User.findByEmail(email);
    if (existingUser) {
      return res.status(400).json({ error: 'E-mail j√° cadastrado' });
    }

    console.log('‚úÖ Usu√°rio n√£o existe, criando...');

    // ‚úÖ HASH DA SENHA (CR√çTICO PARA SEGURAN√áA)
    console.log('üîê Gerando hash da senha...');
    const hashedPassword = await bcrypt.hash(senha, 10);
    console.log('‚úÖ Hash da senha gerado');

    // ‚úÖ DADOS CORRETOS - APENAS COLUNAS EXISTENTES
    const userData = {
      nome,
      email,
      senha: hashedPassword, // ‚úÖ SENHA HASHED
      tipo,
      telefone: telefone || null,
      endereco: endereco || null,
      cep: cep || null
      // ‚ùå REMOVIDO: cidade, estado (n√£o existem na tabela)
    };

    console.log('üìù Dados para criar usu√°rio (APENAS COLUNAS EXISTENTES):', userData);

    // ‚úÖ User.create AGORA RETORNA O USU√ÅRIO COMPLETO, N√ÉO APENAS insertId
    const user = await User.create(userData);

    console.log('üéâ Usu√°rio criado com sucesso, ID:', user.id);

    const token = generateToken(user.id);

    res.status(201).json({
      message: 'Usu√°rio criado com sucesso',
      user: { 
        id: user.id, 
        nome: user.nome, 
        email: user.email, 
        tipo: user.tipo,
        telefone: user.telefone,
        cep: user.cep,
        endereco: user.endereco
      },
      token
    });

  } catch (error) {
    console.error('‚ùå Erro detalhado no registro:', error);
    console.error('‚ùå Stack trace:', error.stack);
    res.status(500).json({ error: 'Erro interno do servidor' });
  }
};

exports.login = async (req, res) => {
  try {
    console.log('üîê Tentativa de login:', req.body.email);

    const { email, senha } = req.body;

    if (!email || !senha) {
      return res.status(400).json({ error: 'E-mail e senha s√£o obrigat√≥rios' });
    }

    const user = await User.findByEmail(email);
    if (!user) {
      console.log('‚ùå Usu√°rio n√£o encontrado:', email);
      return res.status(401).json({ error: 'Credenciais inv√°lidas' });
    }

    console.log('üîê Usu√°rio encontrado, verificando senha...');
    console.log('üìä Senha do banco:', user.senha);
    console.log('üìä Senha fornecida:', senha);

    // ‚úÖ TEMPORARIAMENTE: Compara√ß√£o direta (remover depois)
    console.log('üîê COMPARA√á√ÉO DIRETA (TEMPOR√ÅRIA)');
    const isPasswordValid = (senha === user.senha);
    
    console.log('üìä Resultado da compara√ß√£o direta:', isPasswordValid);

    if (!isPasswordValid) {
      console.log('‚ùå Senha inv√°lida na compara√ß√£o direta');
      return res.status(401).json({ error: 'Credenciais inv√°lidas' });
    }

    const token = generateToken(user.id);

    console.log('‚úÖ Login realizado com sucesso para:', user.email);

    res.json({
      message: 'Login realizado com sucesso',
      user: { 
        id: user.id, 
        nome: user.nome, 
        email: user.email, 
        tipo: user.tipo,
        telefone: user.telefone,
        cep: user.cep,
        endereco: user.endereco
      },
      token
    });
  } catch (error) {
    console.error('‚ùå Erro no login:', error);
    res.status(500).json({ error: 'Erro interno do servidor' });
  }
};

exports.getProfile = async (req, res) => {
  try {
    const user = await User.findById(req.userId);
    if (!user) {
      return res.status(404).json({ error: 'Usu√°rio n√£o encontrado' });
    }

    res.json({ 
      user: {
        id: user.id,
        nome: user.nome,
        email: user.email,
        tipo: user.tipo,
        telefone: user.telefone,
        endereco: user.endereco,
        cep: user.cep
        // ‚ùå REMOVIDO: cidade, estado (n√£o existem na tabela)
      }
    });
  } catch (error) {
    console.error('‚ùå Erro ao buscar perfil:', error);
    res.status(500).json({ error: 'Erro interno do servidor' });
  }
};