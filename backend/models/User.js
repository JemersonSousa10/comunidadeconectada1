const db = require('../config/database');
const bcrypt = require('bcryptjs');

console.log('üîß User.js carregado - ESTRUTURA AIVEN CONFIRMADA');

class User {
    static async create(userData) {
        let connection;
        try {
            console.log('üéØ USER.CREATE - Iniciando cria√ß√£o de usu√°rio');
            console.log('üì¶ Dados recebidos (APENAS COLUNAS EXISTENTES):', {
                email: userData.email,
                tipo: userData.tipo,
                nome: userData.nome,
                telefone: userData.telefone,
                cep: userData.cep,
                endereco: userData.endereco
            });

            // Valida√ß√µes b√°sicas
            if (!userData.email || !userData.senha || !userData.tipo) {
                throw new Error('Email, senha e tipo s√£o obrigat√≥rios');
            }

            console.log('üîê Gerando hash da senha...');
            const saltRounds = 10;
            const hashedPassword = await bcrypt.hash(userData.senha, saltRounds);
            console.log('‚úÖ Hash gerado');

            // Obter conex√£o
            console.log('üìä Obtendo conex√£o com banco...');
            connection = await db;
            console.log('‚úÖ Conex√£o obtida');

            // ‚úÖ‚úÖ‚úÖ QUERY CORRIGIDA - APENAS COLUNAS QUE EXISTEM NA SUA TABELA ‚úÖ‚úÖ‚úÖ
            const sql = `INSERT INTO usuarios 
                (nome, email, senha, tipo, telefone, cep, endereco) 
                VALUES (?, ?, ?, ?, ?, ?, ?)`;
            
            const values = [
                userData.nome || '',
                userData.email,
                hashedPassword,
                userData.tipo,
                userData.telefone || null,
                userData.cep || null,
                userData.endereco || null
            ];

            console.log('üõ†Ô∏è Executando query CORRIGIDA:', sql);
            console.log('üì¶ Valores (7 par√¢metros):', values);

            // Executar inser√ß√£o
            const [result] = await connection.execute(sql, values);
            console.log('‚úÖ Usu√°rio inserido no Aiven. ID:', result.insertId);

            // Buscar usu√°rio criado
            const [users] = await connection.execute(
                `SELECT id, nome, email, tipo, telefone, cep, endereco, 
                 criado_em, atualizado_em 
                 FROM usuarios WHERE id = ?`,
                [result.insertId]
            );

            const userCriado = users[0];
            console.log('üéâ USU√ÅRIO CRIADO COM SUCESSO:', userCriado.email);
            
            return userCriado;
            
        } catch (error) {
            console.error('üí• ERRO CR√çTICO no User.create:');
            console.error('üî¥ C√≥digo:', error.code);
            console.error('üìù Mensagem:', error.message);
            console.error('üîç Stack:', error.stack);
            
            if (error.code === 'ER_DUP_ENTRY') {
                throw new Error('Email j√° est√° cadastrado');
            }
            if (error.code === 'ER_BAD_FIELD_ERROR') {
                throw new Error('Problema na estrutura do banco: ' + error.message);
            }
            
            throw new Error('Erro ao criar usu√°rio: ' + error.message);
        }
    }

    static async findByEmail(email) {
        try {
            console.log('üîç Buscando usu√°rio por email:', email);
            const connection = await db;
            const [users] = await connection.execute(
                'SELECT * FROM usuarios WHERE email = ?',
                [email]
            );
            console.log('‚úÖ Busca conclu√≠da. Encontrados:', users.length);
            return users[0];
        } catch (error) {
            console.error('‚ùå Erro no User.findByEmail:', error);
            throw error;
        }
    }

    static async findById(id) {
        try {
            const connection = await db;
            const [users] = await connection.execute(
                `SELECT id, nome, email, tipo, telefone, cep, endereco, 
                 criado_em, atualizado_em 
                 FROM usuarios WHERE id = ?`,
                [id]
            );
            return users[0];
        } catch (error) {
            console.error('‚ùå Erro no User.findById:', error);
            throw error;
        }
    }
}

module.exports = User;